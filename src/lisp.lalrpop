use std::str::FromStr;
use ast::*;

grammar;

pub Exprs: Vec<Box<Expr>> = { // (1)
    <v:(<Expr>)*> => v,
};

Expr: Box<Expr> = {
    "(" <Exprs> ")" => Box::new(Expr::SExpr(<>)),
    "null" => Box::new(Expr::Null),
    Num => Box::new(Expr::Int(<>)),
    r#""(?:[^"\\]|\\.)*""# => {
      let val = <>;
      Box::new(Expr::Str(val[1..val.len() - 1].to_owned()))
    },
    r#"'(?:[^'\\]|\\.)*'"# => {
      let val = <>;
      Box::new(Expr::Str(val[1..val.len() - 1].to_owned()))
    },
    Term => Box::new(Expr::Atom(<>)),
};

Term: String = {
    r#"[^\d\s"')\(]+"# => (<>).to_owned()
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
