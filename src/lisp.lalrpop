use std::str::FromStr;
use ast::*;

grammar;

pub Exprs: Vec<Expr> = { // (1)
    <v:(<Expr>)*> => v,
};

Expr: Expr = {
    "(" <Exprs> ")" => Expr::SExpr(<>),
    "null" => Expr::Null,
    Num => Expr::Int(<>),
    r#""(?:[^"\\]|\\.)*""# => {
      let val = <>;
      Expr::Str(val[1..val.len() - 1].to_owned())
    },
    r#"'(?:[^'\\]|\\.)*'"# => {
      let val = <>;
      Expr::Str(val[1..val.len() - 1].to_owned())
    },
    r";[^;\n\r]*" => Expr::Null,
    Term => Expr::Atom(<>),
};

Term: String = {
    r#"[^\d\s"';)\(]+"# => (<>).to_owned()
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
